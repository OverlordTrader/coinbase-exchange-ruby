=begin
#Coinbase Exchange REST API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0

=end

require 'date'
require 'time'

module CoinbasePro
  class ApiOrderFill
    # id of trade that created the fill
    attr_accessor :trade_id

    # book the order was placed on
    attr_accessor :product_id

    # uuid
    attr_accessor :order_id

    # id of user's account
    attr_accessor :user_id

    # profile_id that placed the order
    attr_accessor :profile_id

    attr_accessor :liquidity

    # price per unit of base currency
    attr_accessor :price

    # amount of base currency to buy/sell
    attr_accessor :size

    # fees paid on current filled amount
    attr_accessor :fee

    # timestamp of fill
    attr_accessor :created_at

    attr_accessor :side

    # true if funds have been exchanged and settled
    attr_accessor :settled

    # true if funds have been exchanged and settled
    attr_accessor :usd_volume

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'trade_id' => :'trade_id',
        :'product_id' => :'product_id',
        :'order_id' => :'order_id',
        :'user_id' => :'user_id',
        :'profile_id' => :'profile_id',
        :'liquidity' => :'liquidity',
        :'price' => :'price',
        :'size' => :'size',
        :'fee' => :'fee',
        :'created_at' => :'created_at',
        :'side' => :'side',
        :'settled' => :'settled',
        :'usd_volume' => :'usd_volume'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'trade_id' => :'Integer',
        :'product_id' => :'String',
        :'order_id' => :'String',
        :'user_id' => :'String',
        :'profile_id' => :'String',
        :'liquidity' => :'ApiOrderFillLiquidity',
        :'price' => :'String',
        :'size' => :'String',
        :'fee' => :'String',
        :'created_at' => :'String',
        :'side' => :'ApiOrderSide',
        :'settled' => :'Boolean',
        :'usd_volume' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `CoinbasePro::ApiOrderFill` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `CoinbasePro::ApiOrderFill`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'trade_id')
        self.trade_id = attributes[:'trade_id']
      end

      if attributes.key?(:'product_id')
        self.product_id = attributes[:'product_id']
      end

      if attributes.key?(:'order_id')
        self.order_id = attributes[:'order_id']
      end

      if attributes.key?(:'user_id')
        self.user_id = attributes[:'user_id']
      end

      if attributes.key?(:'profile_id')
        self.profile_id = attributes[:'profile_id']
      end

      if attributes.key?(:'liquidity')
        self.liquidity = attributes[:'liquidity']
      else
        self.liquidity = 'M'
      end

      if attributes.key?(:'price')
        self.price = attributes[:'price']
      end

      if attributes.key?(:'size')
        self.size = attributes[:'size']
      end

      if attributes.key?(:'fee')
        self.fee = attributes[:'fee']
      end

      if attributes.key?(:'created_at')
        self.created_at = attributes[:'created_at']
      end

      if attributes.key?(:'side')
        self.side = attributes[:'side']
      else
        self.side = 'buy'
      end

      if attributes.key?(:'settled')
        self.settled = attributes[:'settled']
      end

      if attributes.key?(:'usd_volume')
        self.usd_volume = attributes[:'usd_volume']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @trade_id.nil?
        invalid_properties.push('invalid value for "trade_id", trade_id cannot be nil.')
      end

      if @product_id.nil?
        invalid_properties.push('invalid value for "product_id", product_id cannot be nil.')
      end

      if @order_id.nil?
        invalid_properties.push('invalid value for "order_id", order_id cannot be nil.')
      end

      if @user_id.nil?
        invalid_properties.push('invalid value for "user_id", user_id cannot be nil.')
      end

      if @profile_id.nil?
        invalid_properties.push('invalid value for "profile_id", profile_id cannot be nil.')
      end

      if @liquidity.nil?
        invalid_properties.push('invalid value for "liquidity", liquidity cannot be nil.')
      end

      if @price.nil?
        invalid_properties.push('invalid value for "price", price cannot be nil.')
      end

      if @size.nil?
        invalid_properties.push('invalid value for "size", size cannot be nil.')
      end

      if @fee.nil?
        invalid_properties.push('invalid value for "fee", fee cannot be nil.')
      end

      if @created_at.nil?
        invalid_properties.push('invalid value for "created_at", created_at cannot be nil.')
      end

      if @side.nil?
        invalid_properties.push('invalid value for "side", side cannot be nil.')
      end

      if @settled.nil?
        invalid_properties.push('invalid value for "settled", settled cannot be nil.')
      end

      if @usd_volume.nil?
        invalid_properties.push('invalid value for "usd_volume", usd_volume cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @trade_id.nil?
      return false if @product_id.nil?
      return false if @order_id.nil?
      return false if @user_id.nil?
      return false if @profile_id.nil?
      return false if @liquidity.nil?
      return false if @price.nil?
      return false if @size.nil?
      return false if @fee.nil?
      return false if @created_at.nil?
      return false if @side.nil?
      return false if @settled.nil?
      return false if @usd_volume.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          trade_id == o.trade_id &&
          product_id == o.product_id &&
          order_id == o.order_id &&
          user_id == o.user_id &&
          profile_id == o.profile_id &&
          liquidity == o.liquidity &&
          price == o.price &&
          size == o.size &&
          fee == o.fee &&
          created_at == o.created_at &&
          side == o.side &&
          settled == o.settled &&
          usd_volume == o.usd_volume
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [trade_id, product_id, order_id, user_id, profile_id, liquidity, price, size, fee, created_at, side, settled, usd_volume].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = CoinbasePro.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
