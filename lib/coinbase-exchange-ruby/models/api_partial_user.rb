=begin
#Coinbase Exchange REST API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0

=end

require 'date'
require 'time'

module CoinbasePro
  class ApiPartialUser
    attr_accessor :id

    attr_accessor :created_at

    attr_accessor :active_at

    attr_accessor :name

    attr_accessor :email

    attr_accessor :roles

    attr_accessor :is_banned

    attr_accessor :user_type

    attr_accessor :fulfills_new_requirements

    attr_accessor :flags

    attr_accessor :details

    attr_accessor :preferences

    attr_accessor :has_default

    attr_accessor :state_code

    attr_accessor :cb_data_from_cache

    attr_accessor :two_factor_method

    attr_accessor :legal_name

    attr_accessor :terms_accepted

    attr_accessor :has_clawback_payment_pending

    attr_accessor :has_restricted_assets

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'created_at' => :'created_at',
        :'active_at' => :'active_at',
        :'name' => :'name',
        :'email' => :'email',
        :'roles' => :'roles',
        :'is_banned' => :'is_banned',
        :'user_type' => :'user_type',
        :'fulfills_new_requirements' => :'fulfills_new_requirements',
        :'flags' => :'flags',
        :'details' => :'details',
        :'preferences' => :'preferences',
        :'has_default' => :'has_default',
        :'state_code' => :'state_code',
        :'cb_data_from_cache' => :'cb_data_from_cache',
        :'two_factor_method' => :'two_factor_method',
        :'legal_name' => :'legal_name',
        :'terms_accepted' => :'terms_accepted',
        :'has_clawback_payment_pending' => :'has_clawback_payment_pending',
        :'has_restricted_assets' => :'has_restricted_assets'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'String',
        :'created_at' => :'Time',
        :'active_at' => :'Time',
        :'name' => :'String',
        :'email' => :'String',
        :'roles' => :'Array<Object>',
        :'is_banned' => :'Boolean',
        :'user_type' => :'String',
        :'fulfills_new_requirements' => :'Boolean',
        :'flags' => :'Hash<String, String>',
        :'details' => :'Object',
        :'preferences' => :'Hash<String, Object>',
        :'has_default' => :'Boolean',
        :'state_code' => :'String',
        :'cb_data_from_cache' => :'Boolean',
        :'two_factor_method' => :'String',
        :'legal_name' => :'String',
        :'terms_accepted' => :'Time',
        :'has_clawback_payment_pending' => :'Boolean',
        :'has_restricted_assets' => :'Boolean'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `CoinbasePro::ApiPartialUser` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `CoinbasePro::ApiPartialUser`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'created_at')
        self.created_at = attributes[:'created_at']
      end

      if attributes.key?(:'active_at')
        self.active_at = attributes[:'active_at']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'email')
        self.email = attributes[:'email']
      end

      if attributes.key?(:'roles')
        if (value = attributes[:'roles']).is_a?(Array)
          self.roles = value
        end
      end

      if attributes.key?(:'is_banned')
        self.is_banned = attributes[:'is_banned']
      end

      if attributes.key?(:'user_type')
        self.user_type = attributes[:'user_type']
      end

      if attributes.key?(:'fulfills_new_requirements')
        self.fulfills_new_requirements = attributes[:'fulfills_new_requirements']
      end

      if attributes.key?(:'flags')
        if (value = attributes[:'flags']).is_a?(Hash)
          self.flags = value
        end
      end

      if attributes.key?(:'details')
        self.details = attributes[:'details']
      end

      if attributes.key?(:'preferences')
        if (value = attributes[:'preferences']).is_a?(Hash)
          self.preferences = value
        end
      end

      if attributes.key?(:'has_default')
        self.has_default = attributes[:'has_default']
      end

      if attributes.key?(:'state_code')
        self.state_code = attributes[:'state_code']
      end

      if attributes.key?(:'cb_data_from_cache')
        self.cb_data_from_cache = attributes[:'cb_data_from_cache']
      end

      if attributes.key?(:'two_factor_method')
        self.two_factor_method = attributes[:'two_factor_method']
      end

      if attributes.key?(:'legal_name')
        self.legal_name = attributes[:'legal_name']
      end

      if attributes.key?(:'terms_accepted')
        self.terms_accepted = attributes[:'terms_accepted']
      end

      if attributes.key?(:'has_clawback_payment_pending')
        self.has_clawback_payment_pending = attributes[:'has_clawback_payment_pending']
      end

      if attributes.key?(:'has_restricted_assets')
        self.has_restricted_assets = attributes[:'has_restricted_assets']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @id.nil?
        invalid_properties.push('invalid value for "id", id cannot be nil.')
      end

      if @created_at.nil?
        invalid_properties.push('invalid value for "created_at", created_at cannot be nil.')
      end

      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      if @email.nil?
        invalid_properties.push('invalid value for "email", email cannot be nil.')
      end

      if @is_banned.nil?
        invalid_properties.push('invalid value for "is_banned", is_banned cannot be nil.')
      end

      if @user_type.nil?
        invalid_properties.push('invalid value for "user_type", user_type cannot be nil.')
      end

      if @fulfills_new_requirements.nil?
        invalid_properties.push('invalid value for "fulfills_new_requirements", fulfills_new_requirements cannot be nil.')
      end

      if @preferences.nil?
        invalid_properties.push('invalid value for "preferences", preferences cannot be nil.')
      end

      if @has_default.nil?
        invalid_properties.push('invalid value for "has_default", has_default cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @id.nil?
      return false if @created_at.nil?
      return false if @name.nil?
      return false if @email.nil?
      return false if @is_banned.nil?
      return false if @user_type.nil?
      return false if @fulfills_new_requirements.nil?
      return false if @preferences.nil?
      return false if @has_default.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          created_at == o.created_at &&
          active_at == o.active_at &&
          name == o.name &&
          email == o.email &&
          roles == o.roles &&
          is_banned == o.is_banned &&
          user_type == o.user_type &&
          fulfills_new_requirements == o.fulfills_new_requirements &&
          flags == o.flags &&
          details == o.details &&
          preferences == o.preferences &&
          has_default == o.has_default &&
          state_code == o.state_code &&
          cb_data_from_cache == o.cb_data_from_cache &&
          two_factor_method == o.two_factor_method &&
          legal_name == o.legal_name &&
          terms_accepted == o.terms_accepted &&
          has_clawback_payment_pending == o.has_clawback_payment_pending &&
          has_restricted_assets == o.has_restricted_assets
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, created_at, active_at, name, email, roles, is_banned, user_type, fulfills_new_requirements, flags, details, preferences, has_default, state_code, cb_data_from_cache, two_factor_method, legal_name, terms_accepted, has_clawback_payment_pending, has_restricted_assets].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = CoinbasePro.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
