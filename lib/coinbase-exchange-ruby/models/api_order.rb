=begin
#Coinbase Exchange REST API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0

=end

require 'date'
require 'time'

module CoinbasePro
  class ApiOrder
    # uuid
    attr_accessor :id

    # price per unit of base currency
    attr_accessor :price

    # amount of base currency to buy/sell
    attr_accessor :size

    # book the order was placed on
    attr_accessor :product_id

    # profile_id that placed the order
    attr_accessor :profile_id

    attr_accessor :side

    # amount of quote currency to spend (for market orders)
    attr_accessor :funds

    # funds with fees
    attr_accessor :specified_funds

    attr_accessor :type

    attr_accessor :time_in_force

    # timestamp at which order expires
    attr_accessor :expire_time

    # if true, forces order to be `maker` only
    attr_accessor :post_only

    # timestamp at which order was placed
    attr_accessor :created_at

    # timestamp at which order was done
    attr_accessor :done_at

    # reason order was done (filled, rejected, or otherwise)
    attr_accessor :done_reason

    # reason order was rejected by engine
    attr_accessor :reject_reason

    # fees paid on current filled amount
    attr_accessor :fill_fees

    # amount (in base currency) of the order that has been filled
    attr_accessor :filled_size

    attr_accessor :executed_value

    attr_accessor :status

    # true if funds have been exchanged and settled
    attr_accessor :settled

    attr_accessor :stop

    # price (in quote currency) at which to execute the order
    attr_accessor :stop_price

    attr_accessor :funding_amount

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'price' => :'price',
        :'size' => :'size',
        :'product_id' => :'product_id',
        :'profile_id' => :'profile_id',
        :'side' => :'side',
        :'funds' => :'funds',
        :'specified_funds' => :'specified_funds',
        :'type' => :'type',
        :'time_in_force' => :'time_in_force',
        :'expire_time' => :'expire_time',
        :'post_only' => :'post_only',
        :'created_at' => :'created_at',
        :'done_at' => :'done_at',
        :'done_reason' => :'done_reason',
        :'reject_reason' => :'reject_reason',
        :'fill_fees' => :'fill_fees',
        :'filled_size' => :'filled_size',
        :'executed_value' => :'executed_value',
        :'status' => :'status',
        :'settled' => :'settled',
        :'stop' => :'stop',
        :'stop_price' => :'stop_price',
        :'funding_amount' => :'funding_amount'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'String',
        :'price' => :'String',
        :'size' => :'String',
        :'product_id' => :'String',
        :'profile_id' => :'String',
        :'side' => :'ApiOrderSide',
        :'funds' => :'String',
        :'specified_funds' => :'String',
        :'type' => :'ApiOrderType',
        :'time_in_force' => :'ApiOrderTimeInForce',
        :'expire_time' => :'Time',
        :'post_only' => :'Boolean',
        :'created_at' => :'Time',
        :'done_at' => :'Time',
        :'done_reason' => :'String',
        :'reject_reason' => :'String',
        :'fill_fees' => :'String',
        :'filled_size' => :'String',
        :'executed_value' => :'String',
        :'status' => :'ApiOrderStatus',
        :'settled' => :'Boolean',
        :'stop' => :'ApiOrderStop',
        :'stop_price' => :'String',
        :'funding_amount' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `CoinbasePro::ApiOrder` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `CoinbasePro::ApiOrder`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'price')
        self.price = attributes[:'price']
      end

      if attributes.key?(:'size')
        self.size = attributes[:'size']
      end

      if attributes.key?(:'product_id')
        self.product_id = attributes[:'product_id']
      end

      if attributes.key?(:'profile_id')
        self.profile_id = attributes[:'profile_id']
      end

      if attributes.key?(:'side')
        self.side = attributes[:'side']
      else
        self.side = 'buy'
      end

      if attributes.key?(:'funds')
        self.funds = attributes[:'funds']
      end

      if attributes.key?(:'specified_funds')
        self.specified_funds = attributes[:'specified_funds']
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      else
        self.type = 'limit'
      end

      if attributes.key?(:'time_in_force')
        self.time_in_force = attributes[:'time_in_force']
      else
        self.time_in_force = 'GTC'
      end

      if attributes.key?(:'expire_time')
        self.expire_time = attributes[:'expire_time']
      end

      if attributes.key?(:'post_only')
        self.post_only = attributes[:'post_only']
      end

      if attributes.key?(:'created_at')
        self.created_at = attributes[:'created_at']
      end

      if attributes.key?(:'done_at')
        self.done_at = attributes[:'done_at']
      end

      if attributes.key?(:'done_reason')
        self.done_reason = attributes[:'done_reason']
      end

      if attributes.key?(:'reject_reason')
        self.reject_reason = attributes[:'reject_reason']
      end

      if attributes.key?(:'fill_fees')
        self.fill_fees = attributes[:'fill_fees']
      end

      if attributes.key?(:'filled_size')
        self.filled_size = attributes[:'filled_size']
      end

      if attributes.key?(:'executed_value')
        self.executed_value = attributes[:'executed_value']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      else
        self.status = 'open'
      end

      if attributes.key?(:'settled')
        self.settled = attributes[:'settled']
      end

      if attributes.key?(:'stop')
        self.stop = attributes[:'stop']
      else
        self.stop = 'loss'
      end

      if attributes.key?(:'stop_price')
        self.stop_price = attributes[:'stop_price']
      end

      if attributes.key?(:'funding_amount')
        self.funding_amount = attributes[:'funding_amount']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @id.nil?
        invalid_properties.push('invalid value for "id", id cannot be nil.')
      end

      if @product_id.nil?
        invalid_properties.push('invalid value for "product_id", product_id cannot be nil.')
      end

      if @side.nil?
        invalid_properties.push('invalid value for "side", side cannot be nil.')
      end

      if @type.nil?
        invalid_properties.push('invalid value for "type", type cannot be nil.')
      end

      if @post_only.nil?
        invalid_properties.push('invalid value for "post_only", post_only cannot be nil.')
      end

      if @created_at.nil?
        invalid_properties.push('invalid value for "created_at", created_at cannot be nil.')
      end

      if @fill_fees.nil?
        invalid_properties.push('invalid value for "fill_fees", fill_fees cannot be nil.')
      end

      if @filled_size.nil?
        invalid_properties.push('invalid value for "filled_size", filled_size cannot be nil.')
      end

      if @status.nil?
        invalid_properties.push('invalid value for "status", status cannot be nil.')
      end

      if @settled.nil?
        invalid_properties.push('invalid value for "settled", settled cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @id.nil?
      return false if @product_id.nil?
      return false if @side.nil?
      return false if @type.nil?
      return false if @post_only.nil?
      return false if @created_at.nil?
      return false if @fill_fees.nil?
      return false if @filled_size.nil?
      return false if @status.nil?
      return false if @settled.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          price == o.price &&
          size == o.size &&
          product_id == o.product_id &&
          profile_id == o.profile_id &&
          side == o.side &&
          funds == o.funds &&
          specified_funds == o.specified_funds &&
          type == o.type &&
          time_in_force == o.time_in_force &&
          expire_time == o.expire_time &&
          post_only == o.post_only &&
          created_at == o.created_at &&
          done_at == o.done_at &&
          done_reason == o.done_reason &&
          reject_reason == o.reject_reason &&
          fill_fees == o.fill_fees &&
          filled_size == o.filled_size &&
          executed_value == o.executed_value &&
          status == o.status &&
          settled == o.settled &&
          stop == o.stop &&
          stop_price == o.stop_price &&
          funding_amount == o.funding_amount
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, price, size, product_id, profile_id, side, funds, specified_funds, type, time_in_force, expire_time, post_only, created_at, done_at, done_reason, reject_reason, fill_fees, filled_size, executed_value, status, settled, stop, stop_price, funding_amount].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = CoinbasePro.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
