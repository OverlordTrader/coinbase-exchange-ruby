=begin
#Coinbase Exchange REST API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0

=end

require 'date'
require 'time'

module CoinbasePro
  class ApiPaymentMethodPickerData
    attr_accessor :symbol

    attr_accessor :customer_name

    attr_accessor :account_name

    attr_accessor :account_number

    attr_accessor :account_type

    attr_accessor :institution_code

    attr_accessor :institution_name

    attr_accessor :iban

    attr_accessor :swift

    attr_accessor :paypal_email

    attr_accessor :paypal_owner

    attr_accessor :routing_number

    attr_accessor :institution_identifier

    attr_accessor :bank_name

    attr_accessor :branch_name

    attr_accessor :icon_url

    attr_accessor :balance

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'symbol' => :'symbol',
        :'customer_name' => :'customer_name',
        :'account_name' => :'account_name',
        :'account_number' => :'account_number',
        :'account_type' => :'account_type',
        :'institution_code' => :'institution_code',
        :'institution_name' => :'institution_name',
        :'iban' => :'iban',
        :'swift' => :'swift',
        :'paypal_email' => :'paypal_email',
        :'paypal_owner' => :'paypal_owner',
        :'routing_number' => :'routing_number',
        :'institution_identifier' => :'institution_identifier',
        :'bank_name' => :'bank_name',
        :'branch_name' => :'branch_name',
        :'icon_url' => :'icon_url',
        :'balance' => :'balance'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'symbol' => :'String',
        :'customer_name' => :'String',
        :'account_name' => :'String',
        :'account_number' => :'String',
        :'account_type' => :'String',
        :'institution_code' => :'String',
        :'institution_name' => :'String',
        :'iban' => :'String',
        :'swift' => :'String',
        :'paypal_email' => :'String',
        :'paypal_owner' => :'String',
        :'routing_number' => :'String',
        :'institution_identifier' => :'String',
        :'bank_name' => :'String',
        :'branch_name' => :'String',
        :'icon_url' => :'String',
        :'balance' => :'ApiMonorailCurrencyAmount'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `CoinbasePro::ApiPaymentMethodPickerData` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `CoinbasePro::ApiPaymentMethodPickerData`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'symbol')
        self.symbol = attributes[:'symbol']
      end

      if attributes.key?(:'customer_name')
        self.customer_name = attributes[:'customer_name']
      end

      if attributes.key?(:'account_name')
        self.account_name = attributes[:'account_name']
      end

      if attributes.key?(:'account_number')
        self.account_number = attributes[:'account_number']
      end

      if attributes.key?(:'account_type')
        self.account_type = attributes[:'account_type']
      end

      if attributes.key?(:'institution_code')
        self.institution_code = attributes[:'institution_code']
      end

      if attributes.key?(:'institution_name')
        self.institution_name = attributes[:'institution_name']
      end

      if attributes.key?(:'iban')
        self.iban = attributes[:'iban']
      end

      if attributes.key?(:'swift')
        self.swift = attributes[:'swift']
      end

      if attributes.key?(:'paypal_email')
        self.paypal_email = attributes[:'paypal_email']
      end

      if attributes.key?(:'paypal_owner')
        self.paypal_owner = attributes[:'paypal_owner']
      end

      if attributes.key?(:'routing_number')
        self.routing_number = attributes[:'routing_number']
      end

      if attributes.key?(:'institution_identifier')
        self.institution_identifier = attributes[:'institution_identifier']
      end

      if attributes.key?(:'bank_name')
        self.bank_name = attributes[:'bank_name']
      end

      if attributes.key?(:'branch_name')
        self.branch_name = attributes[:'branch_name']
      end

      if attributes.key?(:'icon_url')
        self.icon_url = attributes[:'icon_url']
      end

      if attributes.key?(:'balance')
        self.balance = attributes[:'balance']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          symbol == o.symbol &&
          customer_name == o.customer_name &&
          account_name == o.account_name &&
          account_number == o.account_number &&
          account_type == o.account_type &&
          institution_code == o.institution_code &&
          institution_name == o.institution_name &&
          iban == o.iban &&
          swift == o.swift &&
          paypal_email == o.paypal_email &&
          paypal_owner == o.paypal_owner &&
          routing_number == o.routing_number &&
          institution_identifier == o.institution_identifier &&
          bank_name == o.bank_name &&
          branch_name == o.branch_name &&
          icon_url == o.icon_url &&
          balance == o.balance
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [symbol, customer_name, account_name, account_number, account_type, institution_code, institution_name, iban, swift, paypal_email, paypal_owner, routing_number, institution_identifier, bank_name, branch_name, icon_url, balance].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = CoinbasePro.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
