=begin
#Coinbase Exchange REST API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0

=end

require 'date'
require 'time'

module CoinbasePro
  class ApiProduct
    attr_accessor :id

    attr_accessor :base_currency

    attr_accessor :quote_currency

    # Minmum order size
    attr_accessor :base_min_size

    # Maximum order size
    attr_accessor :base_max_size

    # Min order price (a.k.a. price increment
    attr_accessor :quote_increment

    attr_accessor :base_increment

    attr_accessor :display_name

    attr_accessor :min_market_funds

    attr_accessor :max_market_funds

    attr_accessor :margin_enabled

    attr_accessor :post_only

    attr_accessor :limit_only

    attr_accessor :cancel_only

    attr_accessor :status

    attr_accessor :status_message

    attr_accessor :trading_disabled

    attr_accessor :fx_stablecoin

    attr_accessor :max_slippage_percentage

    attr_accessor :auction_mode

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'base_currency' => :'base_currency',
        :'quote_currency' => :'quote_currency',
        :'base_min_size' => :'base_min_size',
        :'base_max_size' => :'base_max_size',
        :'quote_increment' => :'quote_increment',
        :'base_increment' => :'base_increment',
        :'display_name' => :'display_name',
        :'min_market_funds' => :'min_market_funds',
        :'max_market_funds' => :'max_market_funds',
        :'margin_enabled' => :'margin_enabled',
        :'post_only' => :'post_only',
        :'limit_only' => :'limit_only',
        :'cancel_only' => :'cancel_only',
        :'status' => :'status',
        :'status_message' => :'status_message',
        :'trading_disabled' => :'trading_disabled',
        :'fx_stablecoin' => :'fx_stablecoin',
        :'max_slippage_percentage' => :'max_slippage_percentage',
        :'auction_mode' => :'auction_mode'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'String',
        :'base_currency' => :'String',
        :'quote_currency' => :'String',
        :'base_min_size' => :'String',
        :'base_max_size' => :'String',
        :'quote_increment' => :'String',
        :'base_increment' => :'String',
        :'display_name' => :'String',
        :'min_market_funds' => :'String',
        :'max_market_funds' => :'String',
        :'margin_enabled' => :'Boolean',
        :'post_only' => :'Boolean',
        :'limit_only' => :'Boolean',
        :'cancel_only' => :'Boolean',
        :'status' => :'ApiProductStatusEnum',
        :'status_message' => :'String',
        :'trading_disabled' => :'Boolean',
        :'fx_stablecoin' => :'Boolean',
        :'max_slippage_percentage' => :'String',
        :'auction_mode' => :'Boolean'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `CoinbasePro::ApiProduct` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `CoinbasePro::ApiProduct`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'base_currency')
        self.base_currency = attributes[:'base_currency']
      end

      if attributes.key?(:'quote_currency')
        self.quote_currency = attributes[:'quote_currency']
      end

      if attributes.key?(:'base_min_size')
        self.base_min_size = attributes[:'base_min_size']
      end

      if attributes.key?(:'base_max_size')
        self.base_max_size = attributes[:'base_max_size']
      end

      if attributes.key?(:'quote_increment')
        self.quote_increment = attributes[:'quote_increment']
      end

      if attributes.key?(:'base_increment')
        self.base_increment = attributes[:'base_increment']
      end

      if attributes.key?(:'display_name')
        self.display_name = attributes[:'display_name']
      end

      if attributes.key?(:'min_market_funds')
        self.min_market_funds = attributes[:'min_market_funds']
      end

      if attributes.key?(:'max_market_funds')
        self.max_market_funds = attributes[:'max_market_funds']
      end

      if attributes.key?(:'margin_enabled')
        self.margin_enabled = attributes[:'margin_enabled']
      end

      if attributes.key?(:'post_only')
        self.post_only = attributes[:'post_only']
      end

      if attributes.key?(:'limit_only')
        self.limit_only = attributes[:'limit_only']
      end

      if attributes.key?(:'cancel_only')
        self.cancel_only = attributes[:'cancel_only']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      else
        self.status = 'online'
      end

      if attributes.key?(:'status_message')
        self.status_message = attributes[:'status_message']
      end

      if attributes.key?(:'trading_disabled')
        self.trading_disabled = attributes[:'trading_disabled']
      end

      if attributes.key?(:'fx_stablecoin')
        self.fx_stablecoin = attributes[:'fx_stablecoin']
      end

      if attributes.key?(:'max_slippage_percentage')
        self.max_slippage_percentage = attributes[:'max_slippage_percentage']
      end

      if attributes.key?(:'auction_mode')
        self.auction_mode = attributes[:'auction_mode']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @id.nil?
        invalid_properties.push('invalid value for "id", id cannot be nil.')
      end

      if @base_currency.nil?
        invalid_properties.push('invalid value for "base_currency", base_currency cannot be nil.')
      end

      if @quote_currency.nil?
        invalid_properties.push('invalid value for "quote_currency", quote_currency cannot be nil.')
      end

      if @base_min_size.nil?
        invalid_properties.push('invalid value for "base_min_size", base_min_size cannot be nil.')
      end

      if @base_max_size.nil?
        invalid_properties.push('invalid value for "base_max_size", base_max_size cannot be nil.')
      end

      if @quote_increment.nil?
        invalid_properties.push('invalid value for "quote_increment", quote_increment cannot be nil.')
      end

      if @base_increment.nil?
        invalid_properties.push('invalid value for "base_increment", base_increment cannot be nil.')
      end

      if @display_name.nil?
        invalid_properties.push('invalid value for "display_name", display_name cannot be nil.')
      end

      if @min_market_funds.nil?
        invalid_properties.push('invalid value for "min_market_funds", min_market_funds cannot be nil.')
      end

      if @max_market_funds.nil?
        invalid_properties.push('invalid value for "max_market_funds", max_market_funds cannot be nil.')
      end

      if @margin_enabled.nil?
        invalid_properties.push('invalid value for "margin_enabled", margin_enabled cannot be nil.')
      end

      if @post_only.nil?
        invalid_properties.push('invalid value for "post_only", post_only cannot be nil.')
      end

      if @limit_only.nil?
        invalid_properties.push('invalid value for "limit_only", limit_only cannot be nil.')
      end

      if @cancel_only.nil?
        invalid_properties.push('invalid value for "cancel_only", cancel_only cannot be nil.')
      end

      if @status.nil?
        invalid_properties.push('invalid value for "status", status cannot be nil.')
      end

      if @status_message.nil?
        invalid_properties.push('invalid value for "status_message", status_message cannot be nil.')
      end

      if @auction_mode.nil?
        invalid_properties.push('invalid value for "auction_mode", auction_mode cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @id.nil?
      return false if @base_currency.nil?
      return false if @quote_currency.nil?
      return false if @base_min_size.nil?
      return false if @base_max_size.nil?
      return false if @quote_increment.nil?
      return false if @base_increment.nil?
      return false if @display_name.nil?
      return false if @min_market_funds.nil?
      return false if @max_market_funds.nil?
      return false if @margin_enabled.nil?
      return false if @post_only.nil?
      return false if @limit_only.nil?
      return false if @cancel_only.nil?
      return false if @status.nil?
      return false if @status_message.nil?
      return false if @auction_mode.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          base_currency == o.base_currency &&
          quote_currency == o.quote_currency &&
          base_min_size == o.base_min_size &&
          base_max_size == o.base_max_size &&
          quote_increment == o.quote_increment &&
          base_increment == o.base_increment &&
          display_name == o.display_name &&
          min_market_funds == o.min_market_funds &&
          max_market_funds == o.max_market_funds &&
          margin_enabled == o.margin_enabled &&
          post_only == o.post_only &&
          limit_only == o.limit_only &&
          cancel_only == o.cancel_only &&
          status == o.status &&
          status_message == o.status_message &&
          trading_disabled == o.trading_disabled &&
          fx_stablecoin == o.fx_stablecoin &&
          max_slippage_percentage == o.max_slippage_percentage &&
          auction_mode == o.auction_mode
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, base_currency, quote_currency, base_min_size, base_max_size, quote_increment, base_increment, display_name, min_market_funds, max_market_funds, margin_enabled, post_only, limit_only, cancel_only, status, status_message, trading_disabled, fx_stablecoin, max_slippage_percentage, auction_mode].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = CoinbasePro.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
