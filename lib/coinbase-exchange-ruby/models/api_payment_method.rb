=begin
#Coinbase Exchange REST API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0

=end

require 'date'
require 'time'

module CoinbasePro
  class ApiPaymentMethod
    attr_accessor :id

    attr_accessor :type

    attr_accessor :name

    attr_accessor :currency

    attr_accessor :primary_buy

    attr_accessor :primary_sell

    attr_accessor :instant_buy

    attr_accessor :instant_sell

    attr_accessor :created_at

    attr_accessor :updated_at

    attr_accessor :resource

    attr_accessor :resource_path

    attr_accessor :verified

    attr_accessor :limits

    attr_accessor :allow_buy

    attr_accessor :allow_sell

    attr_accessor :allow_deposit

    attr_accessor :allow_withdraw

    attr_accessor :fiat_account

    attr_accessor :crypto_account

    attr_accessor :recurring_options

    attr_accessor :available_balance

    attr_accessor :picker_data

    attr_accessor :hold_business_days

    attr_accessor :hold_days

    attr_accessor :verification_method

    attr_accessor :cdv_status

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'type' => :'type',
        :'name' => :'name',
        :'currency' => :'currency',
        :'primary_buy' => :'primary_buy',
        :'primary_sell' => :'primary_sell',
        :'instant_buy' => :'instant_buy',
        :'instant_sell' => :'instant_sell',
        :'created_at' => :'created_at',
        :'updated_at' => :'updated_at',
        :'resource' => :'resource',
        :'resource_path' => :'resource_path',
        :'verified' => :'verified',
        :'limits' => :'limits',
        :'allow_buy' => :'allow_buy',
        :'allow_sell' => :'allow_sell',
        :'allow_deposit' => :'allow_deposit',
        :'allow_withdraw' => :'allow_withdraw',
        :'fiat_account' => :'fiat_account',
        :'crypto_account' => :'crypto_account',
        :'recurring_options' => :'recurring_options',
        :'available_balance' => :'available_balance',
        :'picker_data' => :'picker_data',
        :'hold_business_days' => :'hold_business_days',
        :'hold_days' => :'hold_days',
        :'verification_method' => :'verificationMethod',
        :'cdv_status' => :'cdvStatus'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'String',
        :'type' => :'String',
        :'name' => :'String',
        :'currency' => :'String',
        :'primary_buy' => :'Boolean',
        :'primary_sell' => :'Boolean',
        :'instant_buy' => :'Boolean',
        :'instant_sell' => :'Boolean',
        :'created_at' => :'Time',
        :'updated_at' => :'Time',
        :'resource' => :'String',
        :'resource_path' => :'String',
        :'verified' => :'Boolean',
        :'limits' => :'ApiPaymentMethodLimits',
        :'allow_buy' => :'Boolean',
        :'allow_sell' => :'Boolean',
        :'allow_deposit' => :'Boolean',
        :'allow_withdraw' => :'Boolean',
        :'fiat_account' => :'ApiMonorailLinkedResource',
        :'crypto_account' => :'ApiMonorailLinkedResource',
        :'recurring_options' => :'Array<ApiPaymentMethodRecurringOption>',
        :'available_balance' => :'ApiPaymentMethodAvailableBalance',
        :'picker_data' => :'ApiPaymentMethodPickerData',
        :'hold_business_days' => :'Integer',
        :'hold_days' => :'Integer',
        :'verification_method' => :'String',
        :'cdv_status' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `CoinbasePro::ApiPaymentMethod` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `CoinbasePro::ApiPaymentMethod`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'currency')
        self.currency = attributes[:'currency']
      end

      if attributes.key?(:'primary_buy')
        self.primary_buy = attributes[:'primary_buy']
      end

      if attributes.key?(:'primary_sell')
        self.primary_sell = attributes[:'primary_sell']
      end

      if attributes.key?(:'instant_buy')
        self.instant_buy = attributes[:'instant_buy']
      end

      if attributes.key?(:'instant_sell')
        self.instant_sell = attributes[:'instant_sell']
      end

      if attributes.key?(:'created_at')
        self.created_at = attributes[:'created_at']
      end

      if attributes.key?(:'updated_at')
        self.updated_at = attributes[:'updated_at']
      end

      if attributes.key?(:'resource')
        self.resource = attributes[:'resource']
      end

      if attributes.key?(:'resource_path')
        self.resource_path = attributes[:'resource_path']
      end

      if attributes.key?(:'verified')
        self.verified = attributes[:'verified']
      end

      if attributes.key?(:'limits')
        self.limits = attributes[:'limits']
      end

      if attributes.key?(:'allow_buy')
        self.allow_buy = attributes[:'allow_buy']
      end

      if attributes.key?(:'allow_sell')
        self.allow_sell = attributes[:'allow_sell']
      end

      if attributes.key?(:'allow_deposit')
        self.allow_deposit = attributes[:'allow_deposit']
      end

      if attributes.key?(:'allow_withdraw')
        self.allow_withdraw = attributes[:'allow_withdraw']
      end

      if attributes.key?(:'fiat_account')
        self.fiat_account = attributes[:'fiat_account']
      end

      if attributes.key?(:'crypto_account')
        self.crypto_account = attributes[:'crypto_account']
      end

      if attributes.key?(:'recurring_options')
        if (value = attributes[:'recurring_options']).is_a?(Array)
          self.recurring_options = value
        end
      end

      if attributes.key?(:'available_balance')
        self.available_balance = attributes[:'available_balance']
      end

      if attributes.key?(:'picker_data')
        self.picker_data = attributes[:'picker_data']
      end

      if attributes.key?(:'hold_business_days')
        self.hold_business_days = attributes[:'hold_business_days']
      end

      if attributes.key?(:'hold_days')
        self.hold_days = attributes[:'hold_days']
      end

      if attributes.key?(:'verification_method')
        self.verification_method = attributes[:'verification_method']
      end

      if attributes.key?(:'cdv_status')
        self.cdv_status = attributes[:'cdv_status']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @id.nil?
        invalid_properties.push('invalid value for "id", id cannot be nil.')
      end

      if @type.nil?
        invalid_properties.push('invalid value for "type", type cannot be nil.')
      end

      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      if @currency.nil?
        invalid_properties.push('invalid value for "currency", currency cannot be nil.')
      end

      if @primary_buy.nil?
        invalid_properties.push('invalid value for "primary_buy", primary_buy cannot be nil.')
      end

      if @primary_sell.nil?
        invalid_properties.push('invalid value for "primary_sell", primary_sell cannot be nil.')
      end

      if @instant_buy.nil?
        invalid_properties.push('invalid value for "instant_buy", instant_buy cannot be nil.')
      end

      if @instant_sell.nil?
        invalid_properties.push('invalid value for "instant_sell", instant_sell cannot be nil.')
      end

      if @created_at.nil?
        invalid_properties.push('invalid value for "created_at", created_at cannot be nil.')
      end

      if @updated_at.nil?
        invalid_properties.push('invalid value for "updated_at", updated_at cannot be nil.')
      end

      if @resource.nil?
        invalid_properties.push('invalid value for "resource", resource cannot be nil.')
      end

      if @resource_path.nil?
        invalid_properties.push('invalid value for "resource_path", resource_path cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @id.nil?
      return false if @type.nil?
      return false if @name.nil?
      return false if @currency.nil?
      return false if @primary_buy.nil?
      return false if @primary_sell.nil?
      return false if @instant_buy.nil?
      return false if @instant_sell.nil?
      return false if @created_at.nil?
      return false if @updated_at.nil?
      return false if @resource.nil?
      return false if @resource_path.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          type == o.type &&
          name == o.name &&
          currency == o.currency &&
          primary_buy == o.primary_buy &&
          primary_sell == o.primary_sell &&
          instant_buy == o.instant_buy &&
          instant_sell == o.instant_sell &&
          created_at == o.created_at &&
          updated_at == o.updated_at &&
          resource == o.resource &&
          resource_path == o.resource_path &&
          verified == o.verified &&
          limits == o.limits &&
          allow_buy == o.allow_buy &&
          allow_sell == o.allow_sell &&
          allow_deposit == o.allow_deposit &&
          allow_withdraw == o.allow_withdraw &&
          fiat_account == o.fiat_account &&
          crypto_account == o.crypto_account &&
          recurring_options == o.recurring_options &&
          available_balance == o.available_balance &&
          picker_data == o.picker_data &&
          hold_business_days == o.hold_business_days &&
          hold_days == o.hold_days &&
          verification_method == o.verification_method &&
          cdv_status == o.cdv_status
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, type, name, currency, primary_buy, primary_sell, instant_buy, instant_sell, created_at, updated_at, resource, resource_path, verified, limits, allow_buy, allow_sell, allow_deposit, allow_withdraw, fiat_account, crypto_account, recurring_options, available_balance, picker_data, hold_business_days, hold_days, verification_method, cdv_status].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = CoinbasePro.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
