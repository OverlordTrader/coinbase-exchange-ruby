=begin
#Coinbase Exchange REST API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0

=end

require 'cgi'

module CoinbasePro
  class ProductsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get single product
    # Get information on a single product.
    # @param product_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [ApiProduct]
    def exchange_restapi_get_product(product_id, opts = {})
      data, _status_code, _headers = exchange_restapi_get_product_with_http_info(product_id, opts)
      data
    end

    # Get single product
    # Get information on a single product.
    # @param product_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApiProduct, Integer, Hash)>] ApiProduct data, response status code and response headers
    def exchange_restapi_get_product_with_http_info(product_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProductsApi.exchange_restapi_get_product ...'
      end
      # verify the required parameter 'product_id' is set
      if @api_client.config.client_side_validation && product_id.nil?
        fail ArgumentError, "Missing the required parameter 'product_id' when calling ProductsApi.exchange_restapi_get_product"
      end
      # resource path
      local_var_path = '/products/{product_id}'.sub('{' + 'product_id' + '}', CGI.escape(product_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApiProduct'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ProductsApi.exchange_restapi_get_product",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductsApi#exchange_restapi_get_product\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get product book
    # Get a list of open orders for a product. The amount of detail shown can be customized with the `level` parameter.
    # @param product_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :level 
    # @return [ApiProductBook]
    def exchange_restapi_get_product_book(product_id, opts = {})
      data, _status_code, _headers = exchange_restapi_get_product_book_with_http_info(product_id, opts)
      data
    end

    # Get product book
    # Get a list of open orders for a product. The amount of detail shown can be customized with the &#x60;level&#x60; parameter.
    # @param product_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :level 
    # @return [Array<(ApiProductBook, Integer, Hash)>] ApiProductBook data, response status code and response headers
    def exchange_restapi_get_product_book_with_http_info(product_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProductsApi.exchange_restapi_get_product_book ...'
      end
      # verify the required parameter 'product_id' is set
      if @api_client.config.client_side_validation && product_id.nil?
        fail ArgumentError, "Missing the required parameter 'product_id' when calling ProductsApi.exchange_restapi_get_product_book"
      end
      # resource path
      local_var_path = '/products/{product_id}/book'.sub('{' + 'product_id' + '}', CGI.escape(product_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'level'] = opts[:'level'] if !opts[:'level'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApiProductBook'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ProductsApi.exchange_restapi_get_product_book",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductsApi#exchange_restapi_get_product_book\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get product candles
    # Historic rates for a product. Rates are returned in grouped buckets. Candle schema is of the form `[timestamp, price_low, price_high, price_open, price_close]`
    # @param product_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :granularity 
    # @option opts [String] :start Timestamp for starting range of aggregations
    # @option opts [String] :_end Timestamp for ending range of aggregations
    # @return [Array<Object>]
    def exchange_restapi_get_product_candles(product_id, opts = {})
      data, _status_code, _headers = exchange_restapi_get_product_candles_with_http_info(product_id, opts)
      data
    end

    # Get product candles
    # Historic rates for a product. Rates are returned in grouped buckets. Candle schema is of the form &#x60;[timestamp, price_low, price_high, price_open, price_close]&#x60;
    # @param product_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :granularity 
    # @option opts [String] :start Timestamp for starting range of aggregations
    # @option opts [String] :_end Timestamp for ending range of aggregations
    # @return [Array<(Array<Object>, Integer, Hash)>] Array<Object> data, response status code and response headers
    def exchange_restapi_get_product_candles_with_http_info(product_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProductsApi.exchange_restapi_get_product_candles ...'
      end
      # verify the required parameter 'product_id' is set
      if @api_client.config.client_side_validation && product_id.nil?
        fail ArgumentError, "Missing the required parameter 'product_id' when calling ProductsApi.exchange_restapi_get_product_candles"
      end
      # resource path
      local_var_path = '/products/{product_id}/candles'.sub('{' + 'product_id' + '}', CGI.escape(product_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'granularity'] = opts[:'granularity'] if !opts[:'granularity'].nil?
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'end'] = opts[:'_end'] if !opts[:'_end'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Object>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ProductsApi.exchange_restapi_get_product_candles",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductsApi#exchange_restapi_get_product_candles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get product stats
    # Gets 30day and 24hour stats for a product.
    # @param product_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [ApiProductStats24Hour]
    def exchange_restapi_get_product_stats(product_id, opts = {})
      data, _status_code, _headers = exchange_restapi_get_product_stats_with_http_info(product_id, opts)
      data
    end

    # Get product stats
    # Gets 30day and 24hour stats for a product.
    # @param product_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApiProductStats24Hour, Integer, Hash)>] ApiProductStats24Hour data, response status code and response headers
    def exchange_restapi_get_product_stats_with_http_info(product_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProductsApi.exchange_restapi_get_product_stats ...'
      end
      # verify the required parameter 'product_id' is set
      if @api_client.config.client_side_validation && product_id.nil?
        fail ArgumentError, "Missing the required parameter 'product_id' when calling ProductsApi.exchange_restapi_get_product_stats"
      end
      # resource path
      local_var_path = '/products/{product_id}/stats'.sub('{' + 'product_id' + '}', CGI.escape(product_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApiProductStats24Hour'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ProductsApi.exchange_restapi_get_product_stats",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductsApi#exchange_restapi_get_product_stats\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get product ticker
    # Gets snapshot information about the last trade (tick), best bid/ask and 24h volume.
    # @param product_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [ApiProductTicker]
    def exchange_restapi_get_product_ticker(product_id, opts = {})
      data, _status_code, _headers = exchange_restapi_get_product_ticker_with_http_info(product_id, opts)
      data
    end

    # Get product ticker
    # Gets snapshot information about the last trade (tick), best bid/ask and 24h volume.
    # @param product_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApiProductTicker, Integer, Hash)>] ApiProductTicker data, response status code and response headers
    def exchange_restapi_get_product_ticker_with_http_info(product_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProductsApi.exchange_restapi_get_product_ticker ...'
      end
      # verify the required parameter 'product_id' is set
      if @api_client.config.client_side_validation && product_id.nil?
        fail ArgumentError, "Missing the required parameter 'product_id' when calling ProductsApi.exchange_restapi_get_product_ticker"
      end
      # resource path
      local_var_path = '/products/{product_id}/ticker'.sub('{' + 'product_id' + '}', CGI.escape(product_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApiProductTicker'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ProductsApi.exchange_restapi_get_product_ticker",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductsApi#exchange_restapi_get_product_ticker\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get product trades
    # Gets a list the latest trades for a product.
    # @param product_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit 
    # @option opts [Integer] :before 
    # @option opts [Integer] :after 
    # @return [Array<ApiProductTrade>]
    def exchange_restapi_get_product_trades(product_id, opts = {})
      data, _status_code, _headers = exchange_restapi_get_product_trades_with_http_info(product_id, opts)
      data
    end

    # Get product trades
    # Gets a list the latest trades for a product.
    # @param product_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit 
    # @option opts [Integer] :before 
    # @option opts [Integer] :after 
    # @return [Array<(Array<ApiProductTrade>, Integer, Hash)>] Array<ApiProductTrade> data, response status code and response headers
    def exchange_restapi_get_product_trades_with_http_info(product_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProductsApi.exchange_restapi_get_product_trades ...'
      end
      # verify the required parameter 'product_id' is set
      if @api_client.config.client_side_validation && product_id.nil?
        fail ArgumentError, "Missing the required parameter 'product_id' when calling ProductsApi.exchange_restapi_get_product_trades"
      end
      # resource path
      local_var_path = '/products/{product_id}/trades'.sub('{' + 'product_id' + '}', CGI.escape(product_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'before'] = opts[:'before'] if !opts[:'before'].nil?
      query_params[:'after'] = opts[:'after'] if !opts[:'after'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<ApiProductTrade>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ProductsApi.exchange_restapi_get_product_trades",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductsApi#exchange_restapi_get_product_trades\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all known trading pairs
    # Gets a list of available currency pairs for trading.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type 
    # @return [Array<ApiProduct>]
    def exchange_restapi_get_products(opts = {})
      data, _status_code, _headers = exchange_restapi_get_products_with_http_info(opts)
      data
    end

    # Get all known trading pairs
    # Gets a list of available currency pairs for trading.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type 
    # @return [Array<(Array<ApiProduct>, Integer, Hash)>] Array<ApiProduct> data, response status code and response headers
    def exchange_restapi_get_products_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProductsApi.exchange_restapi_get_products ...'
      end
      # resource path
      local_var_path = '/products'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<ApiProduct>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ProductsApi.exchange_restapi_get_products",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductsApi#exchange_restapi_get_products\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
