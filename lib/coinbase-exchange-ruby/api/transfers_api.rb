=begin
#Coinbase Exchange REST API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0

=end

require 'cgi'

module CoinbasePro
  class TransfersApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get all payment methods
    # Gets a list of the user's linked payment methods.
    # @param [Hash] opts the optional parameters
    # @return [Array<ApiPaymentMethod>]
    def exchange_restapi_get_payment_methods(opts = {})
      data, _status_code, _headers = exchange_restapi_get_payment_methods_with_http_info(opts)
      data
    end

    # Get all payment methods
    # Gets a list of the user&#39;s linked payment methods.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<ApiPaymentMethod>, Integer, Hash)>] Array<ApiPaymentMethod> data, response status code and response headers
    def exchange_restapi_get_payment_methods_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransfersApi.exchange_restapi_get_payment_methods ...'
      end
      # resource path
      local_var_path = '/payment-methods'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<ApiPaymentMethod>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuthKey', 'ApiKeyAuthPassphrase', 'ApiKeyAuthSign', 'ApiKeyAuthTimestamp']

      new_options = opts.merge(
        :operation => :"TransfersApi.exchange_restapi_get_payment_methods",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransfersApi#exchange_restapi_get_payment_methods\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a single transfer
    # Get information on a single transfer.
    # @param transfer_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [ApiTransfer]
    def exchange_restapi_get_transfer(transfer_id, opts = {})
      data, _status_code, _headers = exchange_restapi_get_transfer_with_http_info(transfer_id, opts)
      data
    end

    # Get a single transfer
    # Get information on a single transfer.
    # @param transfer_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApiTransfer, Integer, Hash)>] ApiTransfer data, response status code and response headers
    def exchange_restapi_get_transfer_with_http_info(transfer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransfersApi.exchange_restapi_get_transfer ...'
      end
      # verify the required parameter 'transfer_id' is set
      if @api_client.config.client_side_validation && transfer_id.nil?
        fail ArgumentError, "Missing the required parameter 'transfer_id' when calling TransfersApi.exchange_restapi_get_transfer"
      end
      # resource path
      local_var_path = '/transfers/{transfer_id}'.sub('{' + 'transfer_id' + '}', CGI.escape(transfer_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApiTransfer'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuthKey', 'ApiKeyAuthPassphrase', 'ApiKeyAuthSign', 'ApiKeyAuthTimestamp']

      new_options = opts.merge(
        :operation => :"TransfersApi.exchange_restapi_get_transfer",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransfersApi#exchange_restapi_get_transfer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all transfers
    # Gets a list of in-progress and completed transfers of funds in/out of any of the user's accounts.
    # @param [Hash] opts the optional parameters
    # @return [Array<ApiTransfer>]
    def exchange_restapi_get_transfers(opts = {})
      data, _status_code, _headers = exchange_restapi_get_transfers_with_http_info(opts)
      data
    end

    # Get all transfers
    # Gets a list of in-progress and completed transfers of funds in/out of any of the user&#39;s accounts.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<ApiTransfer>, Integer, Hash)>] Array<ApiTransfer> data, response status code and response headers
    def exchange_restapi_get_transfers_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransfersApi.exchange_restapi_get_transfers ...'
      end
      # resource path
      local_var_path = '/transfers'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<ApiTransfer>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuthKey', 'ApiKeyAuthPassphrase', 'ApiKeyAuthSign', 'ApiKeyAuthTimestamp']

      new_options = opts.merge(
        :operation => :"TransfersApi.exchange_restapi_get_transfers",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransfersApi#exchange_restapi_get_transfers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get fee estimate for crypto withdrawal
    # Gets the fee estimate for the crypto withdrawal to crypto address
    # @param [Hash] opts the optional parameters
    # @option opts [String] :currency 
    # @option opts [String] :crypto_address 
    # @return [ApiFeeEstimateResult]
    def exchange_restapi_get_withdraw_fee_estimate(opts = {})
      data, _status_code, _headers = exchange_restapi_get_withdraw_fee_estimate_with_http_info(opts)
      data
    end

    # Get fee estimate for crypto withdrawal
    # Gets the fee estimate for the crypto withdrawal to crypto address
    # @param [Hash] opts the optional parameters
    # @option opts [String] :currency 
    # @option opts [String] :crypto_address 
    # @return [Array<(ApiFeeEstimateResult, Integer, Hash)>] ApiFeeEstimateResult data, response status code and response headers
    def exchange_restapi_get_withdraw_fee_estimate_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransfersApi.exchange_restapi_get_withdraw_fee_estimate ...'
      end
      # resource path
      local_var_path = '/withdrawals/fee-estimate'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'currency'] = opts[:'currency'] if !opts[:'currency'].nil?
      query_params[:'crypto_address'] = opts[:'crypto_address'] if !opts[:'crypto_address'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApiFeeEstimateResult'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuthKey', 'ApiKeyAuthPassphrase', 'ApiKeyAuthSign', 'ApiKeyAuthTimestamp']

      new_options = opts.merge(
        :operation => :"TransfersApi.exchange_restapi_get_withdraw_fee_estimate",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransfersApi#exchange_restapi_get_withdraw_fee_estimate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deposit from Coinbase account
    # Deposits funds from a www.coinbase.com wallet to the specified `profile_id`.
    # @param api_post_transfer_coinbase_account_request [ApiPostTransferCoinbaseAccountRequest] 
    # @param [Hash] opts the optional parameters
    # @return [ApiTransferResult]
    def exchange_restapi_post_deposit_coinbase_account(api_post_transfer_coinbase_account_request, opts = {})
      data, _status_code, _headers = exchange_restapi_post_deposit_coinbase_account_with_http_info(api_post_transfer_coinbase_account_request, opts)
      data
    end

    # Deposit from Coinbase account
    # Deposits funds from a www.coinbase.com wallet to the specified &#x60;profile_id&#x60;.
    # @param api_post_transfer_coinbase_account_request [ApiPostTransferCoinbaseAccountRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApiTransferResult, Integer, Hash)>] ApiTransferResult data, response status code and response headers
    def exchange_restapi_post_deposit_coinbase_account_with_http_info(api_post_transfer_coinbase_account_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransfersApi.exchange_restapi_post_deposit_coinbase_account ...'
      end
      # verify the required parameter 'api_post_transfer_coinbase_account_request' is set
      if @api_client.config.client_side_validation && api_post_transfer_coinbase_account_request.nil?
        fail ArgumentError, "Missing the required parameter 'api_post_transfer_coinbase_account_request' when calling TransfersApi.exchange_restapi_post_deposit_coinbase_account"
      end
      # resource path
      local_var_path = '/deposits/coinbase-account'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(api_post_transfer_coinbase_account_request)

      # return_type
      return_type = opts[:debug_return_type] || 'ApiTransferResult'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuthKey', 'ApiKeyAuthPassphrase', 'ApiKeyAuthSign', 'ApiKeyAuthTimestamp']

      new_options = opts.merge(
        :operation => :"TransfersApi.exchange_restapi_post_deposit_coinbase_account",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransfersApi#exchange_restapi_post_deposit_coinbase_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deposit from payment method
    # Deposits funds from a linked external payment method to the specified `profile_id`.
    # @param api_post_transfer_payment_method_request [ApiPostTransferPaymentMethodRequest] 
    # @param [Hash] opts the optional parameters
    # @return [ApiTransferResult]
    def exchange_restapi_post_deposit_payment_method(api_post_transfer_payment_method_request, opts = {})
      data, _status_code, _headers = exchange_restapi_post_deposit_payment_method_with_http_info(api_post_transfer_payment_method_request, opts)
      data
    end

    # Deposit from payment method
    # Deposits funds from a linked external payment method to the specified &#x60;profile_id&#x60;.
    # @param api_post_transfer_payment_method_request [ApiPostTransferPaymentMethodRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApiTransferResult, Integer, Hash)>] ApiTransferResult data, response status code and response headers
    def exchange_restapi_post_deposit_payment_method_with_http_info(api_post_transfer_payment_method_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransfersApi.exchange_restapi_post_deposit_payment_method ...'
      end
      # verify the required parameter 'api_post_transfer_payment_method_request' is set
      if @api_client.config.client_side_validation && api_post_transfer_payment_method_request.nil?
        fail ArgumentError, "Missing the required parameter 'api_post_transfer_payment_method_request' when calling TransfersApi.exchange_restapi_post_deposit_payment_method"
      end
      # resource path
      local_var_path = '/deposits/payment-method'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(api_post_transfer_payment_method_request)

      # return_type
      return_type = opts[:debug_return_type] || 'ApiTransferResult'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuthKey', 'ApiKeyAuthPassphrase', 'ApiKeyAuthSign', 'ApiKeyAuthTimestamp']

      new_options = opts.merge(
        :operation => :"TransfersApi.exchange_restapi_post_deposit_payment_method",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransfersApi#exchange_restapi_post_deposit_payment_method\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Withdraw to Coinbase account
    # Withdraws funds from the specified `profile_id` to a www.coinbase.com wallet.
    # @param api_post_transfer_coinbase_account_request [ApiPostTransferCoinbaseAccountRequest] 
    # @param [Hash] opts the optional parameters
    # @return [ApiTransferResult]
    def exchange_restapi_post_withdraw_coinbase_account(api_post_transfer_coinbase_account_request, opts = {})
      data, _status_code, _headers = exchange_restapi_post_withdraw_coinbase_account_with_http_info(api_post_transfer_coinbase_account_request, opts)
      data
    end

    # Withdraw to Coinbase account
    # Withdraws funds from the specified &#x60;profile_id&#x60; to a www.coinbase.com wallet.
    # @param api_post_transfer_coinbase_account_request [ApiPostTransferCoinbaseAccountRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApiTransferResult, Integer, Hash)>] ApiTransferResult data, response status code and response headers
    def exchange_restapi_post_withdraw_coinbase_account_with_http_info(api_post_transfer_coinbase_account_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransfersApi.exchange_restapi_post_withdraw_coinbase_account ...'
      end
      # verify the required parameter 'api_post_transfer_coinbase_account_request' is set
      if @api_client.config.client_side_validation && api_post_transfer_coinbase_account_request.nil?
        fail ArgumentError, "Missing the required parameter 'api_post_transfer_coinbase_account_request' when calling TransfersApi.exchange_restapi_post_withdraw_coinbase_account"
      end
      # resource path
      local_var_path = '/withdrawals/coinbase-account'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(api_post_transfer_coinbase_account_request)

      # return_type
      return_type = opts[:debug_return_type] || 'ApiTransferResult'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuthKey', 'ApiKeyAuthPassphrase', 'ApiKeyAuthSign', 'ApiKeyAuthTimestamp']

      new_options = opts.merge(
        :operation => :"TransfersApi.exchange_restapi_post_withdraw_coinbase_account",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransfersApi#exchange_restapi_post_withdraw_coinbase_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Withdraw to crypto address
    # Withdraws funds from the specified `profile_id` to an external crypto address
    # @param api_post_transfer_crypto_request [ApiPostTransferCryptoRequest] 
    # @param [Hash] opts the optional parameters
    # @return [ApiTransferResult]
    def exchange_restapi_post_withdraw_crypto(api_post_transfer_crypto_request, opts = {})
      data, _status_code, _headers = exchange_restapi_post_withdraw_crypto_with_http_info(api_post_transfer_crypto_request, opts)
      data
    end

    # Withdraw to crypto address
    # Withdraws funds from the specified &#x60;profile_id&#x60; to an external crypto address
    # @param api_post_transfer_crypto_request [ApiPostTransferCryptoRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApiTransferResult, Integer, Hash)>] ApiTransferResult data, response status code and response headers
    def exchange_restapi_post_withdraw_crypto_with_http_info(api_post_transfer_crypto_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransfersApi.exchange_restapi_post_withdraw_crypto ...'
      end
      # verify the required parameter 'api_post_transfer_crypto_request' is set
      if @api_client.config.client_side_validation && api_post_transfer_crypto_request.nil?
        fail ArgumentError, "Missing the required parameter 'api_post_transfer_crypto_request' when calling TransfersApi.exchange_restapi_post_withdraw_crypto"
      end
      # resource path
      local_var_path = '/withdrawals/crypto'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(api_post_transfer_crypto_request)

      # return_type
      return_type = opts[:debug_return_type] || 'ApiTransferResult'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuthKey', 'ApiKeyAuthPassphrase', 'ApiKeyAuthSign', 'ApiKeyAuthTimestamp']

      new_options = opts.merge(
        :operation => :"TransfersApi.exchange_restapi_post_withdraw_crypto",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransfersApi#exchange_restapi_post_withdraw_crypto\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Withdraw to payment method
    # Withdraws funds from the specified `profile_id` to a linked external payment method
    # @param api_post_transfer_payment_method_request [ApiPostTransferPaymentMethodRequest] 
    # @param [Hash] opts the optional parameters
    # @return [ApiTransferResult]
    def exchange_restapi_post_withdraw_payment_method(api_post_transfer_payment_method_request, opts = {})
      data, _status_code, _headers = exchange_restapi_post_withdraw_payment_method_with_http_info(api_post_transfer_payment_method_request, opts)
      data
    end

    # Withdraw to payment method
    # Withdraws funds from the specified &#x60;profile_id&#x60; to a linked external payment method
    # @param api_post_transfer_payment_method_request [ApiPostTransferPaymentMethodRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApiTransferResult, Integer, Hash)>] ApiTransferResult data, response status code and response headers
    def exchange_restapi_post_withdraw_payment_method_with_http_info(api_post_transfer_payment_method_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransfersApi.exchange_restapi_post_withdraw_payment_method ...'
      end
      # verify the required parameter 'api_post_transfer_payment_method_request' is set
      if @api_client.config.client_side_validation && api_post_transfer_payment_method_request.nil?
        fail ArgumentError, "Missing the required parameter 'api_post_transfer_payment_method_request' when calling TransfersApi.exchange_restapi_post_withdraw_payment_method"
      end
      # resource path
      local_var_path = '/withdrawals/payment-method'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(api_post_transfer_payment_method_request)

      # return_type
      return_type = opts[:debug_return_type] || 'ApiTransferResult'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuthKey', 'ApiKeyAuthPassphrase', 'ApiKeyAuthSign', 'ApiKeyAuthTimestamp']

      new_options = opts.merge(
        :operation => :"TransfersApi.exchange_restapi_post_withdraw_payment_method",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransfersApi#exchange_restapi_post_withdraw_payment_method\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
