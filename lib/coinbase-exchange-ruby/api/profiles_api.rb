=begin
#Coinbase Exchange REST API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0

=end

require 'cgi'

module CoinbasePro
  class ProfilesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get profile by id
    # Information for a single profile. Use this endpoint when you know the profile_id.
    # @param profile_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :active 
    # @return [ApiProfile]
    def exchange_restapi_get_profile(profile_id, opts = {})
      data, _status_code, _headers = exchange_restapi_get_profile_with_http_info(profile_id, opts)
      data
    end

    # Get profile by id
    # Information for a single profile. Use this endpoint when you know the profile_id.
    # @param profile_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :active 
    # @return [Array<(ApiProfile, Integer, Hash)>] ApiProfile data, response status code and response headers
    def exchange_restapi_get_profile_with_http_info(profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfilesApi.exchange_restapi_get_profile ...'
      end
      # verify the required parameter 'profile_id' is set
      if @api_client.config.client_side_validation && profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'profile_id' when calling ProfilesApi.exchange_restapi_get_profile"
      end
      # resource path
      local_var_path = '/profiles/{profile_id}'.sub('{' + 'profile_id' + '}', CGI.escape(profile_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'active'] = opts[:'active'] if !opts[:'active'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApiProfile'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuthKey', 'ApiKeyAuthPassphrase', 'ApiKeyAuthSign', 'ApiKeyAuthTimestamp']

      new_options = opts.merge(
        :operation => :"ProfilesApi.exchange_restapi_get_profile",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfilesApi#exchange_restapi_get_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get profiles
    # Gets a list of all of the current user's profiles.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :active 
    # @return [Array<ApiProfile>]
    def exchange_restapi_get_profiles(opts = {})
      data, _status_code, _headers = exchange_restapi_get_profiles_with_http_info(opts)
      data
    end

    # Get profiles
    # Gets a list of all of the current user&#39;s profiles.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :active 
    # @return [Array<(Array<ApiProfile>, Integer, Hash)>] Array<ApiProfile> data, response status code and response headers
    def exchange_restapi_get_profiles_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfilesApi.exchange_restapi_get_profiles ...'
      end
      # resource path
      local_var_path = '/profiles'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'active'] = opts[:'active'] if !opts[:'active'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<ApiProfile>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuthKey', 'ApiKeyAuthPassphrase', 'ApiKeyAuthSign', 'ApiKeyAuthTimestamp']

      new_options = opts.merge(
        :operation => :"ProfilesApi.exchange_restapi_get_profiles",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfilesApi#exchange_restapi_get_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a profile
    # Create a new profile. Will fail if no name is provided or if user already has 10 profiles.
    # @param api_post_profile_request [ApiPostProfileRequest] 
    # @param [Hash] opts the optional parameters
    # @return [ApiProfile]
    def exchange_restapi_post_profile(api_post_profile_request, opts = {})
      data, _status_code, _headers = exchange_restapi_post_profile_with_http_info(api_post_profile_request, opts)
      data
    end

    # Create a profile
    # Create a new profile. Will fail if no name is provided or if user already has 10 profiles.
    # @param api_post_profile_request [ApiPostProfileRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApiProfile, Integer, Hash)>] ApiProfile data, response status code and response headers
    def exchange_restapi_post_profile_with_http_info(api_post_profile_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfilesApi.exchange_restapi_post_profile ...'
      end
      # verify the required parameter 'api_post_profile_request' is set
      if @api_client.config.client_side_validation && api_post_profile_request.nil?
        fail ArgumentError, "Missing the required parameter 'api_post_profile_request' when calling ProfilesApi.exchange_restapi_post_profile"
      end
      # resource path
      local_var_path = '/profiles'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(api_post_profile_request)

      # return_type
      return_type = opts[:debug_return_type] || 'ApiProfile'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuthKey', 'ApiKeyAuthPassphrase', 'ApiKeyAuthSign', 'ApiKeyAuthTimestamp']

      new_options = opts.merge(
        :operation => :"ProfilesApi.exchange_restapi_post_profile",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfilesApi#exchange_restapi_post_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Transfer funds between profiles
    # Transfer an amount of currency from one profile to another.
    # @param api_post_profile_transfer_request [ApiPostProfileTransferRequest] 
    # @param [Hash] opts the optional parameters
    # @return [AnyType]
    def exchange_restapi_post_profile_transfer(api_post_profile_transfer_request, opts = {})
      data, _status_code, _headers = exchange_restapi_post_profile_transfer_with_http_info(api_post_profile_transfer_request, opts)
      data
    end

    # Transfer funds between profiles
    # Transfer an amount of currency from one profile to another.
    # @param api_post_profile_transfer_request [ApiPostProfileTransferRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AnyType, Integer, Hash)>] AnyType data, response status code and response headers
    def exchange_restapi_post_profile_transfer_with_http_info(api_post_profile_transfer_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfilesApi.exchange_restapi_post_profile_transfer ...'
      end
      # verify the required parameter 'api_post_profile_transfer_request' is set
      if @api_client.config.client_side_validation && api_post_profile_transfer_request.nil?
        fail ArgumentError, "Missing the required parameter 'api_post_profile_transfer_request' when calling ProfilesApi.exchange_restapi_post_profile_transfer"
      end
      # resource path
      local_var_path = '/profiles/transfer'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(api_post_profile_transfer_request)

      # return_type
      return_type = opts[:debug_return_type] || 'AnyType'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuthKey', 'ApiKeyAuthPassphrase', 'ApiKeyAuthSign', 'ApiKeyAuthTimestamp']

      new_options = opts.merge(
        :operation => :"ProfilesApi.exchange_restapi_post_profile_transfer",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfilesApi#exchange_restapi_post_profile_transfer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Rename a profile
    # Rename a profile. Names 'default' and 'margin' are reserved.
    # @param profile_id [String] 
    # @param api_put_profile_request [ApiPutProfileRequest] 
    # @param [Hash] opts the optional parameters
    # @return [ApiProfile]
    def exchange_restapi_put_profile(profile_id, api_put_profile_request, opts = {})
      data, _status_code, _headers = exchange_restapi_put_profile_with_http_info(profile_id, api_put_profile_request, opts)
      data
    end

    # Rename a profile
    # Rename a profile. Names &#39;default&#39; and &#39;margin&#39; are reserved.
    # @param profile_id [String] 
    # @param api_put_profile_request [ApiPutProfileRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApiProfile, Integer, Hash)>] ApiProfile data, response status code and response headers
    def exchange_restapi_put_profile_with_http_info(profile_id, api_put_profile_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfilesApi.exchange_restapi_put_profile ...'
      end
      # verify the required parameter 'profile_id' is set
      if @api_client.config.client_side_validation && profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'profile_id' when calling ProfilesApi.exchange_restapi_put_profile"
      end
      # verify the required parameter 'api_put_profile_request' is set
      if @api_client.config.client_side_validation && api_put_profile_request.nil?
        fail ArgumentError, "Missing the required parameter 'api_put_profile_request' when calling ProfilesApi.exchange_restapi_put_profile"
      end
      # resource path
      local_var_path = '/profiles/{profile_id}'.sub('{' + 'profile_id' + '}', CGI.escape(profile_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(api_put_profile_request)

      # return_type
      return_type = opts[:debug_return_type] || 'ApiProfile'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuthKey', 'ApiKeyAuthPassphrase', 'ApiKeyAuthSign', 'ApiKeyAuthTimestamp']

      new_options = opts.merge(
        :operation => :"ProfilesApi.exchange_restapi_put_profile",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfilesApi#exchange_restapi_put_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a profile
    # Deletes the profile specified by `profile_id` and transfers all funds to the profile specified by `to`. Fails if there are any open orders on the profile to be deleted.
    # @param profile_id [String] 
    # @param api_put_profile_deactivate_request [ApiPutProfileDeactivateRequest] 
    # @param [Hash] opts the optional parameters
    # @return [AnyType]
    def exchange_restapi_put_profile_deactivate(profile_id, api_put_profile_deactivate_request, opts = {})
      data, _status_code, _headers = exchange_restapi_put_profile_deactivate_with_http_info(profile_id, api_put_profile_deactivate_request, opts)
      data
    end

    # Delete a profile
    # Deletes the profile specified by &#x60;profile_id&#x60; and transfers all funds to the profile specified by &#x60;to&#x60;. Fails if there are any open orders on the profile to be deleted.
    # @param profile_id [String] 
    # @param api_put_profile_deactivate_request [ApiPutProfileDeactivateRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AnyType, Integer, Hash)>] AnyType data, response status code and response headers
    def exchange_restapi_put_profile_deactivate_with_http_info(profile_id, api_put_profile_deactivate_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProfilesApi.exchange_restapi_put_profile_deactivate ...'
      end
      # verify the required parameter 'profile_id' is set
      if @api_client.config.client_side_validation && profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'profile_id' when calling ProfilesApi.exchange_restapi_put_profile_deactivate"
      end
      # verify the required parameter 'api_put_profile_deactivate_request' is set
      if @api_client.config.client_side_validation && api_put_profile_deactivate_request.nil?
        fail ArgumentError, "Missing the required parameter 'api_put_profile_deactivate_request' when calling ProfilesApi.exchange_restapi_put_profile_deactivate"
      end
      # resource path
      local_var_path = '/profiles/{profile_id}/deactivate'.sub('{' + 'profile_id' + '}', CGI.escape(profile_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(api_put_profile_deactivate_request)

      # return_type
      return_type = opts[:debug_return_type] || 'AnyType'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuthKey', 'ApiKeyAuthPassphrase', 'ApiKeyAuthSign', 'ApiKeyAuthTimestamp']

      new_options = opts.merge(
        :operation => :"ProfilesApi.exchange_restapi_put_profile_deactivate",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfilesApi#exchange_restapi_put_profile_deactivate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
