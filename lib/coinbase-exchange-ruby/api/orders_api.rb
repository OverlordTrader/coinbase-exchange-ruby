=begin
#Coinbase Exchange REST API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0

=end

require 'cgi'

module CoinbasePro
  class OrdersApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Cancel an order
    # Cancel a single open order by `{id}`.
    # @param order_id [String] &#x60;id&#x60; of the order to cancel
    # @param [Hash] opts the optional parameters
    # @option opts [String] :profile_id Cancels orders on a specific profile
    # @return [String]
    def exchange_restapi_delete_order(order_id, opts = {})
      data, _status_code, _headers = exchange_restapi_delete_order_with_http_info(order_id, opts)
      data
    end

    # Cancel an order
    # Cancel a single open order by &#x60;{id}&#x60;.
    # @param order_id [String] &#x60;id&#x60; of the order to cancel
    # @param [Hash] opts the optional parameters
    # @option opts [String] :profile_id Cancels orders on a specific profile
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def exchange_restapi_delete_order_with_http_info(order_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrdersApi.exchange_restapi_delete_order ...'
      end
      # verify the required parameter 'order_id' is set
      if @api_client.config.client_side_validation && order_id.nil?
        fail ArgumentError, "Missing the required parameter 'order_id' when calling OrdersApi.exchange_restapi_delete_order"
      end
      # resource path
      local_var_path = '/orders/{order_id}'.sub('{' + 'order_id' + '}', CGI.escape(order_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'profile_id'] = opts[:'profile_id'] if !opts[:'profile_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'String'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuthKey', 'ApiKeyAuthPassphrase', 'ApiKeyAuthSign', 'ApiKeyAuthTimestamp']

      new_options = opts.merge(
        :operation => :"OrdersApi.exchange_restapi_delete_order",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrdersApi#exchange_restapi_delete_order\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Cancel all orders
    # With best effort, cancel all open orders. This may require you to make the request multiple times until all of the open orders are deleted.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :profile_id Cancels orders on a specific profile
    # @option opts [String] :product_id Cancels orders on a specific product only
    # @return [Array<String>]
    def exchange_restapi_delete_orders(opts = {})
      data, _status_code, _headers = exchange_restapi_delete_orders_with_http_info(opts)
      data
    end

    # Cancel all orders
    # With best effort, cancel all open orders. This may require you to make the request multiple times until all of the open orders are deleted.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :profile_id Cancels orders on a specific profile
    # @option opts [String] :product_id Cancels orders on a specific product only
    # @return [Array<(Array<String>, Integer, Hash)>] Array<String> data, response status code and response headers
    def exchange_restapi_delete_orders_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrdersApi.exchange_restapi_delete_orders ...'
      end
      # resource path
      local_var_path = '/orders'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'profile_id'] = opts[:'profile_id'] if !opts[:'profile_id'].nil?
      query_params[:'product_id'] = opts[:'product_id'] if !opts[:'product_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<String>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuthKey', 'ApiKeyAuthPassphrase', 'ApiKeyAuthSign', 'ApiKeyAuthTimestamp']

      new_options = opts.merge(
        :operation => :"OrdersApi.exchange_restapi_delete_orders",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrdersApi#exchange_restapi_delete_orders\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all fills
    # Get a list of fills. A fill is a partial or complete match on a specific order.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :order_id limit to fills on a specific order. Either &#x60;order_id&#x60; or &#x60;product_id&#x60; is required.
    # @option opts [String] :product_id limit to fills on a specific product. Either &#x60;order_id&#x60; or &#x60;product_id&#x60; is required.
    # @option opts [String] :profile_id get results for a specific profile (default to 'default')
    # @option opts [Integer] :limit Limit on number of results to return.
    # @option opts [Integer] :before Used for pagination. Sets start cursor to &#x60;before&#x60; date.
    # @option opts [Integer] :after Used for pagination. Sets end cursor to &#x60;after&#x60; date.
    # @return [Array<ApiOrderFill>]
    def exchange_restapi_get_fills(opts = {})
      data, _status_code, _headers = exchange_restapi_get_fills_with_http_info(opts)
      data
    end

    # Get all fills
    # Get a list of fills. A fill is a partial or complete match on a specific order.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :order_id limit to fills on a specific order. Either &#x60;order_id&#x60; or &#x60;product_id&#x60; is required.
    # @option opts [String] :product_id limit to fills on a specific product. Either &#x60;order_id&#x60; or &#x60;product_id&#x60; is required.
    # @option opts [String] :profile_id get results for a specific profile
    # @option opts [Integer] :limit Limit on number of results to return.
    # @option opts [Integer] :before Used for pagination. Sets start cursor to &#x60;before&#x60; date.
    # @option opts [Integer] :after Used for pagination. Sets end cursor to &#x60;after&#x60; date.
    # @return [Array<(Array<ApiOrderFill>, Integer, Hash)>] Array<ApiOrderFill> data, response status code and response headers
    def exchange_restapi_get_fills_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrdersApi.exchange_restapi_get_fills ...'
      end
      # resource path
      local_var_path = '/fills'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'order_id'] = opts[:'order_id'] if !opts[:'order_id'].nil?
      query_params[:'product_id'] = opts[:'product_id'] if !opts[:'product_id'].nil?
      query_params[:'profile_id'] = opts[:'profile_id'] if !opts[:'profile_id'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'before'] = opts[:'before'] if !opts[:'before'].nil?
      query_params[:'after'] = opts[:'after'] if !opts[:'after'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<ApiOrderFill>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuthKey', 'ApiKeyAuthPassphrase', 'ApiKeyAuthSign', 'ApiKeyAuthTimestamp']

      new_options = opts.merge(
        :operation => :"OrdersApi.exchange_restapi_get_fills",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrdersApi#exchange_restapi_get_fills\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get single order
    # Get a single order by `id`.
    # @param order_id [String] &#x60;order_id&#x60; is either the exchange assigned id or the client assigned client_oid. When using client_oid it must be preceded by the client: namespace.
    # @param [Hash] opts the optional parameters
    # @return [ApiOrder]
    def exchange_restapi_get_order(order_id, opts = {})
      data, _status_code, _headers = exchange_restapi_get_order_with_http_info(order_id, opts)
      data
    end

    # Get single order
    # Get a single order by &#x60;id&#x60;.
    # @param order_id [String] &#x60;order_id&#x60; is either the exchange assigned id or the client assigned client_oid. When using client_oid it must be preceded by the client: namespace.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApiOrder, Integer, Hash)>] ApiOrder data, response status code and response headers
    def exchange_restapi_get_order_with_http_info(order_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrdersApi.exchange_restapi_get_order ...'
      end
      # verify the required parameter 'order_id' is set
      if @api_client.config.client_side_validation && order_id.nil?
        fail ArgumentError, "Missing the required parameter 'order_id' when calling OrdersApi.exchange_restapi_get_order"
      end
      # resource path
      local_var_path = '/orders/{order_id}'.sub('{' + 'order_id' + '}', CGI.escape(order_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApiOrder'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuthKey', 'ApiKeyAuthPassphrase', 'ApiKeyAuthSign', 'ApiKeyAuthTimestamp']

      new_options = opts.merge(
        :operation => :"OrdersApi.exchange_restapi_get_order",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrdersApi#exchange_restapi_get_order\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all orders
    # List your current open orders. Only open or un-settled orders are returned by default. As soon as an order is no longer open and settled, it will no longer appear in the default request. Open orders may change state between the request and the response depending on market conditions.
    # @param limit [Integer] Limit on number of results to return.
    # @param status [Array<String>] Array with order statuses to filter by.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :profile_id Filter results by a specific profile_id
    # @option opts [String] :product_id Filter results by a specific product_id
    # @option opts [String] :sorted_by Sort criteria for results. (default to 'created_at')
    # @option opts [String] :sorting Ascending or descending order, by &#x60;sortedBy&#x60; (default to 'desc')
    # @option opts [Time] :start_date Filter results by minimum posted date
    # @option opts [Time] :end_date Filter results by maximum posted date
    # @option opts [String] :before Used for pagination. Sets start cursor to &#x60;before&#x60; date.
    # @option opts [String] :after Used for pagination. Sets end cursor to &#x60;after&#x60; date.
    # @return [Array<ApiOrder>]
    def exchange_restapi_get_orders(limit, status, opts = {})
      data, _status_code, _headers = exchange_restapi_get_orders_with_http_info(limit, status, opts)
      data
    end

    # Get all orders
    # List your current open orders. Only open or un-settled orders are returned by default. As soon as an order is no longer open and settled, it will no longer appear in the default request. Open orders may change state between the request and the response depending on market conditions.
    # @param limit [Integer] Limit on number of results to return.
    # @param status [Array<String>] Array with order statuses to filter by.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :profile_id Filter results by a specific profile_id
    # @option opts [String] :product_id Filter results by a specific product_id
    # @option opts [String] :sorted_by Sort criteria for results.
    # @option opts [String] :sorting Ascending or descending order, by &#x60;sortedBy&#x60;
    # @option opts [Time] :start_date Filter results by minimum posted date
    # @option opts [Time] :end_date Filter results by maximum posted date
    # @option opts [String] :before Used for pagination. Sets start cursor to &#x60;before&#x60; date.
    # @option opts [String] :after Used for pagination. Sets end cursor to &#x60;after&#x60; date.
    # @return [Array<(Array<ApiOrder>, Integer, Hash)>] Array<ApiOrder> data, response status code and response headers
    def exchange_restapi_get_orders_with_http_info(limit, status, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrdersApi.exchange_restapi_get_orders ...'
      end
      # verify the required parameter 'limit' is set
      if @api_client.config.client_side_validation && limit.nil?
        fail ArgumentError, "Missing the required parameter 'limit' when calling OrdersApi.exchange_restapi_get_orders"
      end
      # verify the required parameter 'status' is set
      if @api_client.config.client_side_validation && status.nil?
        fail ArgumentError, "Missing the required parameter 'status' when calling OrdersApi.exchange_restapi_get_orders"
      end
      allowable_values = ["created_at", "price", "size", "order_id", "side", "type"]
      if @api_client.config.client_side_validation && opts[:'sorted_by'] && !allowable_values.include?(opts[:'sorted_by'])
        fail ArgumentError, "invalid value for \"sorted_by\", must be one of #{allowable_values}"
      end
      allowable_values = ["desc", "asc"]
      if @api_client.config.client_side_validation && opts[:'sorting'] && !allowable_values.include?(opts[:'sorting'])
        fail ArgumentError, "invalid value for \"sorting\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/orders'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = limit
      query_params[:'status'] = @api_client.build_collection_param(status, :multi)
      query_params[:'profile_id'] = opts[:'profile_id'] if !opts[:'profile_id'].nil?
      query_params[:'product_id'] = opts[:'product_id'] if !opts[:'product_id'].nil?
      query_params[:'sortedBy'] = opts[:'sorted_by'] if !opts[:'sorted_by'].nil?
      query_params[:'sorting'] = opts[:'sorting'] if !opts[:'sorting'].nil?
      query_params[:'start_date'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'end_date'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'before'] = opts[:'before'] if !opts[:'before'].nil?
      query_params[:'after'] = opts[:'after'] if !opts[:'after'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<ApiOrder>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuthKey', 'ApiKeyAuthPassphrase', 'ApiKeyAuthSign', 'ApiKeyAuthTimestamp']

      new_options = opts.merge(
        :operation => :"OrdersApi.exchange_restapi_get_orders",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrdersApi#exchange_restapi_get_orders\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a new order
    # Create an order. You can place two types of orders: limit and market. Orders can only be placed if your account has sufficient funds. Once an order is placed, your account funds will be put on hold for the duration of the order. How much and which funds are put on hold depends on the order type and parameters specified.
    # @param api_post_orders_request [ApiPostOrdersRequest] 
    # @param [Hash] opts the optional parameters
    # @return [ApiOrder]
    def exchange_restapi_post_orders(api_post_orders_request, opts = {})
      data, _status_code, _headers = exchange_restapi_post_orders_with_http_info(api_post_orders_request, opts)
      data
    end

    # Create a new order
    # Create an order. You can place two types of orders: limit and market. Orders can only be placed if your account has sufficient funds. Once an order is placed, your account funds will be put on hold for the duration of the order. How much and which funds are put on hold depends on the order type and parameters specified.
    # @param api_post_orders_request [ApiPostOrdersRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApiOrder, Integer, Hash)>] ApiOrder data, response status code and response headers
    def exchange_restapi_post_orders_with_http_info(api_post_orders_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrdersApi.exchange_restapi_post_orders ...'
      end
      # verify the required parameter 'api_post_orders_request' is set
      if @api_client.config.client_side_validation && api_post_orders_request.nil?
        fail ArgumentError, "Missing the required parameter 'api_post_orders_request' when calling OrdersApi.exchange_restapi_post_orders"
      end
      # resource path
      local_var_path = '/orders'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(api_post_orders_request)

      # return_type
      return_type = opts[:debug_return_type] || 'ApiOrder'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuthKey', 'ApiKeyAuthPassphrase', 'ApiKeyAuthSign', 'ApiKeyAuthTimestamp']

      new_options = opts.merge(
        :operation => :"OrdersApi.exchange_restapi_post_orders",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrdersApi#exchange_restapi_post_orders\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
