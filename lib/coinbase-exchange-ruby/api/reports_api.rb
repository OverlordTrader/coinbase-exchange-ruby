=begin
#Coinbase Exchange REST API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0

=end

require 'cgi'

module CoinbasePro
  class ReportsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get a report
    # Get a specific report by `report_id`.
    # @param report_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [ApiReport]
    def exchange_restapi_get_report(report_id, opts = {})
      data, _status_code, _headers = exchange_restapi_get_report_with_http_info(report_id, opts)
      data
    end

    # Get a report
    # Get a specific report by &#x60;report_id&#x60;.
    # @param report_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApiReport, Integer, Hash)>] ApiReport data, response status code and response headers
    def exchange_restapi_get_report_with_http_info(report_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportsApi.exchange_restapi_get_report ...'
      end
      # verify the required parameter 'report_id' is set
      if @api_client.config.client_side_validation && report_id.nil?
        fail ArgumentError, "Missing the required parameter 'report_id' when calling ReportsApi.exchange_restapi_get_report"
      end
      # resource path
      local_var_path = '/reports/{report_id}'.sub('{' + 'report_id' + '}', CGI.escape(report_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApiReport'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuthKey', 'ApiKeyAuthPassphrase', 'ApiKeyAuthSign', 'ApiKeyAuthTimestamp']

      new_options = opts.merge(
        :operation => :"ReportsApi.exchange_restapi_get_report",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportsApi#exchange_restapi_get_report\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all reports
    # Gets a list of past fills/account reports.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :portfolio_id Filter results by a specific profile_id
    # @option opts [Time] :after Filter results after a specific date
    # @option opts [Integer] :limit Limit results to a specific number
    # @option opts [String] :type Filter results by type of report (&#x60;fills&#x60; or &#x60;account&#x60;)   - otc_fills: real string is &#x60;otc-fills&#x60;  - type_1099k_transaction_history: real string is &#x60;1099-transaction-history&#x60;  - tax_invoice: real string is &#x60;tax-invoice&#x60; (default to 'fills')
    # @option opts [Boolean] :ignore_expired Ignore expired results
    # @return [Array<ApiReport>]
    def exchange_restapi_get_reports(opts = {})
      data, _status_code, _headers = exchange_restapi_get_reports_with_http_info(opts)
      data
    end

    # Get all reports
    # Gets a list of past fills/account reports.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :portfolio_id Filter results by a specific profile_id
    # @option opts [Time] :after Filter results after a specific date
    # @option opts [Integer] :limit Limit results to a specific number
    # @option opts [String] :type Filter results by type of report (&#x60;fills&#x60; or &#x60;account&#x60;)   - otc_fills: real string is &#x60;otc-fills&#x60;  - type_1099k_transaction_history: real string is &#x60;1099-transaction-history&#x60;  - tax_invoice: real string is &#x60;tax-invoice&#x60;
    # @option opts [Boolean] :ignore_expired Ignore expired results
    # @return [Array<(Array<ApiReport>, Integer, Hash)>] Array<ApiReport> data, response status code and response headers
    def exchange_restapi_get_reports_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportsApi.exchange_restapi_get_reports ...'
      end
      allowable_values = ["fills", "account", "otc_fills", "type_1099k_transaction_history", "tax_invoice"]
      if @api_client.config.client_side_validation && opts[:'type'] && !allowable_values.include?(opts[:'type'])
        fail ArgumentError, "invalid value for \"type\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/reports'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'portfolio_id'] = opts[:'portfolio_id'] if !opts[:'portfolio_id'].nil?
      query_params[:'after'] = opts[:'after'] if !opts[:'after'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?
      query_params[:'ignore_expired'] = opts[:'ignore_expired'] if !opts[:'ignore_expired'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<ApiReport>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuthKey', 'ApiKeyAuthPassphrase', 'ApiKeyAuthSign', 'ApiKeyAuthTimestamp']

      new_options = opts.merge(
        :operation => :"ReportsApi.exchange_restapi_get_reports",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportsApi#exchange_restapi_get_reports\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a report
    # Generates a report. Reports are either for past account history or past fills on either all accounts or one product's account.
    # @param api_post_reports_request [ApiPostReportsRequest] 
    # @param [Hash] opts the optional parameters
    # @return [ApiReportCreateResult]
    def exchange_restapi_post_reports(api_post_reports_request, opts = {})
      data, _status_code, _headers = exchange_restapi_post_reports_with_http_info(api_post_reports_request, opts)
      data
    end

    # Create a report
    # Generates a report. Reports are either for past account history or past fills on either all accounts or one product&#39;s account.
    # @param api_post_reports_request [ApiPostReportsRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApiReportCreateResult, Integer, Hash)>] ApiReportCreateResult data, response status code and response headers
    def exchange_restapi_post_reports_with_http_info(api_post_reports_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportsApi.exchange_restapi_post_reports ...'
      end
      # verify the required parameter 'api_post_reports_request' is set
      if @api_client.config.client_side_validation && api_post_reports_request.nil?
        fail ArgumentError, "Missing the required parameter 'api_post_reports_request' when calling ReportsApi.exchange_restapi_post_reports"
      end
      # resource path
      local_var_path = '/reports'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(api_post_reports_request)

      # return_type
      return_type = opts[:debug_return_type] || 'ApiReportCreateResult'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuthKey', 'ApiKeyAuthPassphrase', 'ApiKeyAuthSign', 'ApiKeyAuthTimestamp']

      new_options = opts.merge(
        :operation => :"ReportsApi.exchange_restapi_post_reports",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportsApi#exchange_restapi_post_reports\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
