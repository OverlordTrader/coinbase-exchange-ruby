=begin
#Coinbase Exchange REST API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0

=end

require 'spec_helper'
require 'json'

# Unit tests for CoinbasePro::OrdersApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'OrdersApi' do
  before do
    # run before each test
    @api_instance = CoinbasePro::OrdersApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of OrdersApi' do
    it 'should create an instance of OrdersApi' do
      expect(@api_instance).to be_instance_of(CoinbasePro::OrdersApi)
    end
  end

  # unit tests for exchange_restapi_delete_order
  # Cancel an order
  # Cancel a single open order by &#x60;{id}&#x60;.
  # @param order_id &#x60;id&#x60; of the order to cancel
  # @param [Hash] opts the optional parameters
  # @option opts [String] :profile_id Cancels orders on a specific profile
  # @return [String]
  describe 'exchange_restapi_delete_order test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for exchange_restapi_delete_orders
  # Cancel all orders
  # With best effort, cancel all open orders. This may require you to make the request multiple times until all of the open orders are deleted.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :profile_id Cancels orders on a specific profile
  # @option opts [String] :product_id Cancels orders on a specific product only
  # @return [Array<String>]
  describe 'exchange_restapi_delete_orders test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for exchange_restapi_get_fills
  # Get all fills
  # Get a list of fills. A fill is a partial or complete match on a specific order.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :order_id limit to fills on a specific order. Either &#x60;order_id&#x60; or &#x60;product_id&#x60; is required.
  # @option opts [String] :product_id limit to fills on a specific product. Either &#x60;order_id&#x60; or &#x60;product_id&#x60; is required.
  # @option opts [String] :profile_id get results for a specific profile
  # @option opts [Integer] :limit Limit on number of results to return.
  # @option opts [Integer] :before Used for pagination. Sets start cursor to &#x60;before&#x60; date.
  # @option opts [Integer] :after Used for pagination. Sets end cursor to &#x60;after&#x60; date.
  # @return [Array<ApiOrderFill>]
  describe 'exchange_restapi_get_fills test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for exchange_restapi_get_order
  # Get single order
  # Get a single order by &#x60;id&#x60;.
  # @param order_id &#x60;order_id&#x60; is either the exchange assigned id or the client assigned client_oid. When using client_oid it must be preceded by the client: namespace.
  # @param [Hash] opts the optional parameters
  # @return [ApiOrder]
  describe 'exchange_restapi_get_order test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for exchange_restapi_get_orders
  # Get all orders
  # List your current open orders. Only open or un-settled orders are returned by default. As soon as an order is no longer open and settled, it will no longer appear in the default request. Open orders may change state between the request and the response depending on market conditions.
  # @param limit Limit on number of results to return.
  # @param status Array with order statuses to filter by.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :profile_id Filter results by a specific profile_id
  # @option opts [String] :product_id Filter results by a specific product_id
  # @option opts [String] :sorted_by Sort criteria for results.
  # @option opts [String] :sorting Ascending or descending order, by &#x60;sortedBy&#x60;
  # @option opts [Time] :start_date Filter results by minimum posted date
  # @option opts [Time] :end_date Filter results by maximum posted date
  # @option opts [String] :before Used for pagination. Sets start cursor to &#x60;before&#x60; date.
  # @option opts [String] :after Used for pagination. Sets end cursor to &#x60;after&#x60; date.
  # @return [Array<ApiOrder>]
  describe 'exchange_restapi_get_orders test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for exchange_restapi_post_orders
  # Create a new order
  # Create an order. You can place two types of orders: limit and market. Orders can only be placed if your account has sufficient funds. Once an order is placed, your account funds will be put on hold for the duration of the order. How much and which funds are put on hold depends on the order type and parameters specified.
  # @param api_post_orders_request 
  # @param [Hash] opts the optional parameters
  # @return [ApiOrder]
  describe 'exchange_restapi_post_orders test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
